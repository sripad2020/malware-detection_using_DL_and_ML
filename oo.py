import seaborn as sn
import matplotlib.pyplot as plt
import pandas as pd
data=pd.read_csv('Obfuscated-MalMem2022.csv')
print(data.columns)
print(data.dtypes)
print(data.describe())
print(data.info())
print(data.isna().sum())
int_columns=data.select_dtypes(include='int')
float_columns=data.select_dtypes(include='float')
cat_columns=data.select_dtypes(include='object')
print(int_columns.columns)
print()
print(float_columns.columns)
print()
print(cat_columns.nunique())
print()
print(cat_columns.value_counts())
from sklearn.preprocessing import LabelEncoder
lab=LabelEncoder()
data['category']=lab.fit_transform(data['Category'])
data['class']=lab.fit_transform(data['Class'])
sn.countplot(data['Class'])
plt.show()
x=data[['pslist.nproc', 'pslist.nppid', 'pslist.avg_threads',
       'pslist.nprocs64bit', 'pslist.avg_handlers', 'dlllist.ndlls',
       'dlllist.avg_dlls_per_proc', 'handles.nhandles',
       'handles.avg_handles_per_proc', 'handles.nport', 'handles.nfile',
       'handles.nevent', 'handles.ndesktop', 'handles.nkey', 'handles.nthread',
       'handles.ndirectory', 'handles.nsemaphore', 'handles.ntimer',
       'handles.nsection', 'handles.nmutant', 'ldrmodules.not_in_load',
       'ldrmodules.not_in_init', 'ldrmodules.not_in_mem',
       'ldrmodules.not_in_load_avg', 'ldrmodules.not_in_init_avg',
       'ldrmodules.not_in_mem_avg', 'malfind.ninjections',
       'malfind.commitCharge', 'malfind.protection',
       'malfind.uniqueInjections', 'psxview.not_in_pslist',
       'psxview.not_in_eprocess_pool', 'psxview.not_in_ethread_pool',
       'psxview.not_in_pspcid_list', 'psxview.not_in_csrss_handles',
       'psxview.not_in_session', 'psxview.not_in_deskthrd',
       'psxview.not_in_pslist_false_avg',
       'psxview.not_in_eprocess_pool_false_avg',
       'psxview.not_in_ethread_pool_false_avg',
       'psxview.not_in_pspcid_list_false_avg',
       'psxview.not_in_csrss_handles_false_avg',
       'psxview.not_in_session_false_avg', 'psxview.not_in_deskthrd_false_avg',
       'modules.nmodules', 'svcscan.nservices', 'svcscan.kernel_drivers',
       'svcscan.fs_drivers', 'svcscan.process_services',
       'svcscan.shared_process_services',
       'svcscan.interactive_process_services', 'svcscan.nactive',
       'callbacks.ncallbacks', 'callbacks.nanonymous', 'callbacks.ngeneric']]
y=data[['class']]
print(y)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y)
print(x_test.shape)
from keras.models import Sequential
from keras.layers import Dense
import keras.activations,keras.metrics,keras.losses
model=Sequential()
model.add(Dense(units=x_train.shape[1],input_dim=x.shape[1],activation=keras.activations.sigmoid))
model.add(Dense(units=x_train.shape[1],input_dim=x.shape[1],activation=keras.activations.sigmoid))
model.add(Dense(units=x_train.shape[1],input_dim=x.shape[1],activation=keras.activations.sigmoid))
model.add(Dense(units=x_train.shape[1],input_dim=x.shape[1],activation=keras.activations.sigmoid))
model.add(Dense(units=x_train.shape[1],input_dim=x.shape[1],activation=keras.activations.sigmoid))
model.add(Dense(units=x_train.shape[1],input_dim=x.shape[1],activation=keras.activations.sigmoid))
model.add(Dense(units=x_train.shape[1],input_dim=x.shape[1],activation=keras.activations.sigmoid))
model.add(Dense(units=x_train.shape[1],input_dim=x.shape[1],activation=keras.activations.sigmoid))
model.add(Dense(units=1,activation=keras.activations.sigmoid))
model.compile(optimizer='rmsprop',loss=keras.losses.binary_crossentropy,metrics=['accuracy'])
model.fit(x_train,y_train,batch_size=20,epochs=30,validation_batch_size=0.32)
pred=model.predict(x_test)
print(pred)
from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier()
rf.fit(x_train,y_train)
predi=rf.predict(x_test)
from sklearn.metrics import confusion_matrix,accuracy_score
cf=confusion_matrix(y_test,predi)
print(cf)
acc=accuracy_score(y_test,predi)
print(acc)